import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function checkUsers() {
  try {
    console.log('üîç Verificando usuarios en el sistema...')

    const users = await prisma.user.findMany({
      include: {
        tenant: {
          select: {
            name: true,
            slug: true,
          },
        },
      },
    })

    if (users.length === 0) {
      console.log('‚ùå No hay usuarios en el sistema')
      return
    }

    console.log(`\n‚úÖ Encontrados ${users.length} usuarios:`)
    users.forEach((user, index) => {
      console.log(`\n${index + 1}. Usuario:`)
      console.log(`   ‚Ä¢ Email: ${user.email}`)
      console.log(`   ‚Ä¢ Nombre: ${user.firstName} ${user.lastName}`)
      console.log(`   ‚Ä¢ Role: ${user.role}`)
      console.log(`   ‚Ä¢ Activo: ${user.isActive ? 'S√≠' : 'No'}`)
      console.log(`   ‚Ä¢ Tenant: ${user.tenant?.name} (${user.tenant?.slug})`)
    })

    // Verificar si existe el usuario que est√° intentando usar
    const metanoiaUser = users.find(u => u.email === 'metanoia@gmail.com')
    if (!metanoiaUser) {
      console.log('\n‚ùå No existe usuario con email "metanoia@gmail.com"')
      console.log('\nüìã Usuarios disponibles para login:')
      users.forEach(user => {
        console.log(`   ‚Ä¢ ${user.email}`)
      })
    } else {
      console.log('\n‚úÖ Usuario "metanoia@gmail.com" encontrado')
      console.log(`   ‚Ä¢ Activo: ${metanoiaUser.isActive ? 'S√≠' : 'No'}`)
      console.log(`   ‚Ä¢ Role: ${metanoiaUser.role}`)
    }
  } catch (error) {
    console.error('‚ùå Error verificando usuarios:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Ejecutar el script
checkUsers()
  .then(() => {
    console.log('\n‚úÖ Script completado')
    process.exit(0)
  })
  .catch(error => {
    console.error('\n‚ùå Error en el script:', error)
    process.exit(1)
  })
