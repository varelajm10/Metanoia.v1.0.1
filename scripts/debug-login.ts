import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function debugLogin() {
  try {
    console.log('üîç Debug del proceso de login...')

    const email = 'admin@metanoia.click'
    const password = 'metanoia123'

    console.log(`\nüìß Buscando usuario con email: ${email}`)

    // Paso 1: Buscar usuario
    const user = await prisma.user.findFirst({
      where: { email },
      include: {
        tenant: true,
      },
    })

    if (!user) {
      console.log('‚ùå Usuario no encontrado')
      return
    }

    console.log('‚úÖ Usuario encontrado:')
    console.log(`   ‚Ä¢ ID: ${user.id}`)
    console.log(`   ‚Ä¢ Email: ${user.email}`)
    console.log(`   ‚Ä¢ Nombre: ${user.firstName} ${user.lastName}`)
    console.log(`   ‚Ä¢ Role: ${user.role}`)
    console.log(`   ‚Ä¢ Activo: ${user.isActive}`)
    console.log(`   ‚Ä¢ Tenant ID: ${user.tenantId}`)
    console.log(`   ‚Ä¢ Tenant Name: ${user.tenant?.name}`)

    // Paso 2: Verificar si est√° activo
    if (!user.isActive) {
      console.log('‚ùå Usuario inactivo')
      return
    }

    console.log('‚úÖ Usuario est√° activo')

    // Paso 3: Verificar contrase√±a
    console.log(`\nüîê Verificando contrase√±a...`)
    console.log(`   ‚Ä¢ Contrase√±a recibida: ${password}`)
    console.log(`   ‚Ä¢ Hash almacenado: ${user.password.substring(0, 20)}...`)

    const isValidPassword = await bcrypt.compare(password, user.password)

    if (!isValidPassword) {
      console.log('‚ùå Contrase√±a incorrecta')
      console.log('\nüîß Vamos a crear un nuevo hash...')

      const newHash = await bcrypt.hash(password, 12)
      await prisma.user.update({
        where: { id: user.id },
        data: { password: newHash },
      })

      console.log('‚úÖ Nuevo hash creado y guardado')

      // Verificar nuevamente
      const isValidPassword2 = await bcrypt.compare(password, newHash)
      console.log(
        `‚úÖ Verificaci√≥n con nuevo hash: ${isValidPassword2 ? 'CORRECTA' : 'INCORRECTA'}`
      )

      return
    }

    console.log('‚úÖ Contrase√±a correcta')

    // Paso 4: Simular respuesta de autenticaci√≥n exitosa
    console.log('\nüéâ AUTENTICACI√ìN EXITOSA!')
    console.log('\nüìã Datos que deber√≠an devolverse:')
    console.log(`   ‚Ä¢ User ID: ${user.id}`)
    console.log(`   ‚Ä¢ Email: ${user.email}`)
    console.log(`   ‚Ä¢ Role: ${user.role}`)
    console.log(`   ‚Ä¢ Tenant ID: ${user.tenantId}`)

    console.log('\nüîó Para probar en el navegador:')
    console.log('   1. Ir a: http://localhost:3000/login')
    console.log('   2. Email: admin@metanoia.click')
    console.log('   3. Contrase√±a: metanoia123')
  } catch (error) {
    console.error('‚ùå Error en debug de login:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Ejecutar el script
debugLogin()
  .then(() => {
    console.log('\n‚úÖ Debug completado')
    process.exit(0)
  })
  .catch(error => {
    console.error('\n‚ùå Error en el debug:', error)
    process.exit(1)
  })
