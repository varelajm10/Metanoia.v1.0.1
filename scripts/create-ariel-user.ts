import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function createArielUser() {
  try {
    console.log('üöÄ Creando usuario administrador para Ariel S.A....')

    // Buscar el tenant Ariel
    const arielTenant = await prisma.tenant.findUnique({
      where: { slug: 'ariel' },
    })

    if (!arielTenant) {
      console.log('‚ùå Cliente Ariel no encontrado')
      console.log(
        'üí° Ejecuta primero: npx ts-node scripts/enable-ariel-modules.ts'
      )
      return
    }

    console.log(`‚úÖ Cliente Ariel encontrado: ${arielTenant.name}`)
    console.log(`   ‚Ä¢ ID: ${arielTenant.id}`)
    console.log(`   ‚Ä¢ Slug: ${arielTenant.slug}`)
    console.log(`   ‚Ä¢ Plan: ${arielTenant.subscriptionPlan}`)

    // Verificar si ya existe un usuario para Ariel
    const existingUser = await prisma.user.findFirst({
      where: {
        tenantId: arielTenant.id,
        email: 'admin@ariel.com',
      },
    })

    if (existingUser) {
      console.log('‚ö†Ô∏è  El usuario admin@ariel.com ya existe para Ariel')
      console.log(`   ‚Ä¢ ID: ${existingUser.id}`)
      console.log(
        `   ‚Ä¢ Nombre: ${existingUser.firstName} ${existingUser.lastName}`
      )
      console.log(`   ‚Ä¢ Email: ${existingUser.email}`)
      console.log(`   ‚Ä¢ Rol: ${existingUser.role}`)
      console.log(`   ‚Ä¢ Activo: ${existingUser.isActive ? 'S√≠' : 'No'}`)

      console.log('\nüîê Credenciales existentes:')
      console.log(`   ‚Ä¢ Email: admin@ariel.com`)
      console.log(`   ‚Ä¢ Contrase√±a: [Ya configurada]`)
      console.log(`   ‚Ä¢ Rol: ${existingUser.role}`)

      return existingUser
    }

    // Crear el hash de la contrase√±a
    const password = 'ariel123' // Contrase√±a por defecto
    const hashedPassword = await bcrypt.hash(password, 12)

    console.log('üîê Creando usuario administrador...')

    // Crear el usuario administrador de Ariel
    const arielUser = await prisma.user.create({
      data: {
        email: 'admin@ariel.com',
        password: hashedPassword,
        firstName: 'Juan',
        lastName: 'P√©rez',
        role: 'ADMIN',
        isActive: true,
        tenantId: arielTenant.id,
      },
    })

    console.log('‚úÖ Usuario administrador de Ariel creado exitosamente')
    console.log(`   ‚Ä¢ ID: ${arielUser.id}`)
    console.log(`   ‚Ä¢ Nombre: ${arielUser.firstName} ${arielUser.lastName}`)
    console.log(`   ‚Ä¢ Email: ${arielUser.email}`)
    console.log(`   ‚Ä¢ Rol: ${arielUser.role}`)
    console.log(`   ‚Ä¢ Activo: ${arielUser.isActive ? 'S√≠' : 'No'}`)

    // Crear tambi√©n un usuario est√°ndar para pruebas
    const standardPassword = 'usuario123'
    const hashedStandardPassword = await bcrypt.hash(standardPassword, 12)

    const standardUser = await prisma.user.create({
      data: {
        email: 'usuario@ariel.com',
        password: hashedStandardPassword,
        firstName: 'Mar√≠a',
        lastName: 'Garc√≠a',
        role: 'USER',
        isActive: true,
        tenantId: arielTenant.id,
      },
    })

    console.log('‚úÖ Usuario est√°ndar de Ariel creado exitosamente')
    console.log(`   ‚Ä¢ ID: ${standardUser.id}`)
    console.log(
      `   ‚Ä¢ Nombre: ${standardUser.firstName} ${standardUser.lastName}`
    )
    console.log(`   ‚Ä¢ Email: ${standardUser.email}`)
    console.log(`   ‚Ä¢ Rol: ${standardUser.role}`)

    // Verificar m√≥dulos habilitados
    const enabledModules = await prisma.tenantModule.findMany({
      where: {
        tenantId: arielTenant.id,
        isEnabled: true,
      },
      include: {
        module: true,
      },
    })

    console.log('\nüìã M√≥dulos habilitados para Ariel:')
    enabledModules.forEach(tm => {
      console.log(`   ‚úÖ ${tm.module.displayName} - ${tm.module.category}`)
    })

    // Resumen final
    console.log('\nüéâ ¬°Usuarios de Ariel S.A. creados exitosamente!')
    console.log('üîê Credenciales de acceso:')
    console.log('\nüëë ADMINISTRADOR:')
    console.log(`   ‚Ä¢ Email: admin@ariel.com`)
    console.log(`   ‚Ä¢ Contrase√±a: ariel123`)
    console.log(`   ‚Ä¢ Rol: ADMIN (acceso completo a m√≥dulos habilitados)`)

    console.log('\nüë§ USUARIO EST√ÅNDAR:')
    console.log(`   ‚Ä¢ Email: usuario@ariel.com`)
    console.log(`   ‚Ä¢ Contrase√±a: usuario123`)
    console.log(`   ‚Ä¢ Rol: USER (acceso limitado)`)

    console.log('\nüîó URLs de acceso:')
    console.log(`   ‚Ä¢ Login: http://localhost:3000/login`)
    console.log(`   ‚Ä¢ Dashboard: http://localhost:3000/dashboard`)
    console.log(
      `   ‚Ä¢ Administraci√≥n: http://localhost:3000/dashboard/admin/tenants`
    )

    console.log('\nüìù Pr√≥ximos pasos:')
    console.log('   1. Ir a http://localhost:3000/login')
    console.log(
      '   2. Usar las credenciales del administrador (admin@ariel.com / ariel123)'
    )
    console.log('   3. Verificar que solo aparezcan los m√≥dulos habilitados:')
    console.log('      - ‚úÖ Gesti√≥n de Clientes')
    console.log('      - ‚úÖ Gesti√≥n de Servidores')
    console.log('   4. Probar la funcionalidad de ambos m√≥dulos')

    console.log('\nüè¢ Informaci√≥n del Tenant:')
    console.log(`   ‚Ä¢ Nombre: ${arielTenant.name}`)
    console.log(
      `   ‚Ä¢ Contacto: ${arielTenant.contactName} (${arielTenant.contactEmail})`
    )
    console.log(`   ‚Ä¢ Ubicaci√≥n: ${arielTenant.city}, ${arielTenant.country}`)
    console.log(`   ‚Ä¢ Plan: ${arielTenant.subscriptionPlan}`)
    console.log(
      `   ‚Ä¢ L√≠mites: ${arielTenant.maxUsers} usuarios, ${arielTenant.maxServers} servidores`
    )

    return { arielUser, standardUser }
  } catch (error) {
    console.error('‚ùå Error creando usuarios de Ariel:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Ejecutar el script
createArielUser()
  .then(() => {
    console.log('\n‚úÖ Script completado exitosamente')
    process.exit(0)
  })
  .catch(error => {
    console.error('\n‚ùå Error en el script:', error)
    process.exit(1)
  })
