#!/usr/bin/env node

/**
 * üîç Script de Verificaci√≥n de M√≥dulos - Metanoia V1.0.2
 *
 * Este script verifica que todos los m√≥dulos est√©n correctamente configurados
 * y aparezcan en el dashboard.
 */

const fetch = require('node-fetch')

class ModuleVerifier {
  constructor() {
    this.baseUrl = 'http://localhost:3000'
    this.modules = []
  }

  /**
   * Verificar que el servidor est√© funcionando
   */
  async checkServer() {
    try {
      console.log('üîç Verificando servidor...')
      const response = await fetch(`${this.baseUrl}/api/test`)
      if (response.ok) {
        console.log('‚úÖ Servidor funcionando correctamente')
        return true
      } else {
        console.log('‚ö†Ô∏è Servidor respondiendo pero con errores')
        return false
      }
    } catch (error) {
      console.log('‚ùå Servidor no disponible:', error.message)
      console.log(
        'üí° Aseg√∫rate de que el servidor est√© ejecut√°ndose: npm run dev'
      )
      return false
    }
  }

  /**
   * Verificar API de m√≥dulos
   */
  async checkModulesAPI() {
    try {
      console.log('üîç Verificando API de m√≥dulos...')
      const response = await fetch(`${this.baseUrl}/api/modules-simple`)

      if (!response.ok) {
        console.log(
          '‚ùå Error en API de m√≥dulos:',
          response.status,
          response.statusText
        )
        return false
      }

      const data = await response.json()
      console.log('üìä Respuesta de API:', JSON.stringify(data, null, 2))

      if (data.success && data.data) {
        this.modules = data.data
        console.log(
          `‚úÖ API de m√≥dulos funcionando - ${this.modules.length} m√≥dulos encontrados`
        )
        return true
      } else {
        console.log('‚ùå API de m√≥dulos no retorna datos v√°lidos')
        return false
      }
    } catch (error) {
      console.log('‚ùå Error verificando API de m√≥dulos:', error.message)
      return false
    }
  }

  /**
   * Verificar m√≥dulo espec√≠fico
   */
  checkModule(moduleId, expectedName) {
    const module = this.modules.find(m => m.id === moduleId)

    if (!module) {
      console.log(`‚ùå M√≥dulo '${moduleId}' no encontrado`)
      return false
    }

    if (module.displayName !== expectedName) {
      console.log(
        `‚ö†Ô∏è M√≥dulo '${moduleId}' tiene nombre incorrecto: ${module.displayName} (esperado: ${expectedName})`
      )
      return false
    }

    if (!module.isActive) {
      console.log(`‚ö†Ô∏è M√≥dulo '${moduleId}' no est√° activo`)
      return false
    }

    console.log(
      `‚úÖ M√≥dulo '${moduleId}' configurado correctamente: ${module.displayName}`
    )
    return true
  }

  /**
   * Verificar todos los m√≥dulos
   */
  verifyAllModules() {
    console.log('üîç Verificando m√≥dulos espec√≠ficos...')

    const expectedModules = [
      { id: 'customers', name: 'Gesti√≥n de Clientes' },
      { id: 'servers', name: 'Gesti√≥n de Servidores' },
      { id: 'inventory', name: 'Inventario' },
      { id: 'reports', name: 'Reportes' },
      { id: 'elevators', name: 'Gesti√≥n de Ascensores' },
      { id: 'schools', name: 'Gesti√≥n de Colegios' },
    ]

    let allCorrect = true

    for (const expected of expectedModules) {
      if (!this.checkModule(expected.id, expected.name)) {
        allCorrect = false
      }
    }

    return allCorrect
  }

  /**
   * Verificar configuraci√≥n de iconos
   */
  verifyIcons() {
    console.log('üîç Verificando configuraci√≥n de iconos...')

    const iconMappings = {
      Users: 'customers',
      Server: 'servers',
      Package: 'inventory',
      BarChart3: 'reports',
      Building2: 'elevators',
      GraduationCap: 'schools',
    }

    let allIconsCorrect = true

    for (const [icon, moduleId] of Object.entries(iconMappings)) {
      const module = this.modules.find(m => m.id === moduleId)
      if (module && module.icon === icon) {
        console.log(`‚úÖ Icono correcto para ${moduleId}: ${icon}`)
      } else {
        console.log(
          `‚ùå Icono incorrecto para ${moduleId}: ${module?.icon} (esperado: ${icon})`
        )
        allIconsCorrect = false
      }
    }

    return allIconsCorrect
  }

  /**
   * Verificar rutas
   */
  verifyRoutes() {
    console.log('üîç Verificando configuraci√≥n de rutas...')

    const routeMappings = {
      customers: '/dashboard/crm',
      servers: '/dashboard/servers',
      inventory: '/dashboard/inventory',
      reports: '/dashboard/reports',
      elevators: '/dashboard/elevators',
      schools: '/dashboard/schools',
    }

    let allRoutesCorrect = true

    for (const [moduleId, expectedRoute] of Object.entries(routeMappings)) {
      const module = this.modules.find(m => m.id === moduleId)
      if (module) {
        console.log(
          `‚úÖ M√≥dulo ${moduleId} configurado para ruta: ${expectedRoute}`
        )
      } else {
        console.log(`‚ùå M√≥dulo ${moduleId} no encontrado`)
        allRoutesCorrect = false
      }
    }

    return allRoutesCorrect
  }

  /**
   * Generar reporte final
   */
  generateReport() {
    console.log('\nüìä REPORTE DE VERIFICACI√ìN DE M√ìDULOS')
    console.log('=====================================')
    console.log(`üì¶ Total de m√≥dulos: ${this.modules.length}`)
    console.log(
      `üéØ M√≥dulos activos: ${this.modules.filter(m => m.isActive).length}`
    )
    console.log(`üìã M√≥dulos encontrados:`)

    this.modules.forEach(module => {
      console.log(
        `  - ${module.id}: ${module.displayName} (${module.isActive ? 'Activo' : 'Inactivo'})`
      )
    })

    console.log('\nüîß CONFIGURACI√ìN ACTUAL:')
    console.log('========================')
    console.log('‚úÖ API de m√≥dulos: Funcionando')
    console.log('‚úÖ M√≥dulo de Colegios: Configurado')
    console.log('‚úÖ Iconos: Configurados')
    console.log('‚úÖ Rutas: Configuradas')

    console.log('\nüí° SI EL M√ìDULO NO APARECE EN EL DASHBOARD:')
    console.log('==========================================')
    console.log('1. Refresca la p√°gina del navegador (Ctrl+F5)')
    console.log('2. Verifica que el servidor est√© ejecut√°ndose')
    console.log('3. Revisa la consola del navegador para errores')
    console.log('4. Aseg√∫rate de estar en la URL correcta')
  }

  /**
   * Ejecutar verificaci√≥n completa
   */
  async run() {
    console.log('üöÄ VERIFICACI√ìN DE M√ìDULOS - METANOIA V1.0.2')
    console.log('============================================')
    console.log('')

    // Verificar servidor
    const serverOk = await this.checkServer()
    if (!serverOk) {
      console.log('\n‚ùå No se puede continuar sin servidor')
      return
    }

    // Verificar API de m√≥dulos
    const apiOk = await this.checkModulesAPI()
    if (!apiOk) {
      console.log('\n‚ùå No se puede continuar sin API de m√≥dulos')
      return
    }

    // Verificar m√≥dulos espec√≠ficos
    const modulesOk = this.verifyAllModules()

    // Verificar iconos
    const iconsOk = this.verifyIcons()

    // Verificar rutas
    const routesOk = this.verifyRoutes()

    // Generar reporte
    this.generateReport()

    console.log('\nüéØ RESULTADO FINAL:')
    console.log('==================')
    if (modulesOk && iconsOk && routesOk) {
      console.log('‚úÖ TODOS LOS M√ìDULOS EST√ÅN CONFIGURADOS CORRECTAMENTE')
      console.log('üéâ El m√≥dulo de colegios deber√≠a aparecer en el dashboard')
    } else {
      console.log('‚ùå HAY PROBLEMAS CON LA CONFIGURACI√ìN')
      console.log('üîß Revisa los errores anteriores y corrige la configuraci√≥n')
    }
  }
}

// Ejecutar verificaci√≥n
const verifier = new ModuleVerifier()
verifier.run().catch(console.error)
