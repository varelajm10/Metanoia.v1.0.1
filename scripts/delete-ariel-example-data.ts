import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function deleteArielExampleData() {
  try {
    console.log('üöÄ Eliminando datos de ejemplo del tenant Ariel...')

    // Buscar el tenant Ariel
    const arielTenant = await prisma.tenant.findUnique({
      where: { slug: 'ariel' },
    })

    if (!arielTenant) {
      console.log('‚ùå Cliente Ariel no encontrado')
      return
    }

    console.log(`‚úÖ Cliente Ariel encontrado: ${arielTenant.name}`)
    console.log(`   ‚Ä¢ ID: ${arielTenant.id}`)
    console.log(`   ‚Ä¢ Slug: ${arielTenant.slug}`)

    // Contar datos existentes antes de eliminar
    const customersCount = await prisma.customer.count({
      where: { tenantId: arielTenant.id },
    })

    const serverClientsCount = await prisma.serverClient.count({
      where: { tenantId: arielTenant.id },
    })

    const serversCount = await prisma.server.count({
      where: { tenantId: arielTenant.id },
    })

    console.log('\nüìä Datos existentes en Ariel:')
    console.log(`   ‚Ä¢ Clientes: ${customersCount}`)
    console.log(`   ‚Ä¢ Clientes de servidor: ${serverClientsCount}`)
    console.log(`   ‚Ä¢ Servidores: ${serversCount}`)

    if (
      customersCount === 0 &&
      serverClientsCount === 0 &&
      serversCount === 0
    ) {
      console.log('‚úÖ No hay datos de ejemplo para eliminar')
      return
    }

    // Eliminar servidores primero (por las foreign keys)
    if (serversCount > 0) {
      console.log('\nüóëÔ∏è  Eliminando servidores...')
      const deletedServers = await prisma.server.deleteMany({
        where: { tenantId: arielTenant.id },
      })
      console.log(`‚úÖ ${deletedServers.count} servidores eliminados`)
    }

    // Eliminar clientes de servidor
    if (serverClientsCount > 0) {
      console.log('\nüóëÔ∏è  Eliminando clientes de servidor...')
      const deletedServerClients = await prisma.serverClient.deleteMany({
        where: { tenantId: arielTenant.id },
      })
      console.log(
        `‚úÖ ${deletedServerClients.count} clientes de servidor eliminados`
      )
    }

    // Eliminar clientes
    if (customersCount > 0) {
      console.log('\nüóëÔ∏è  Eliminando clientes...')
      const deletedCustomers = await prisma.customer.deleteMany({
        where: { tenantId: arielTenant.id },
      })
      console.log(`‚úÖ ${deletedCustomers.count} clientes eliminados`)
    }

    // Verificar eliminaci√≥n
    const remainingCustomers = await prisma.customer.count({
      where: { tenantId: arielTenant.id },
    })

    const remainingServerClients = await prisma.serverClient.count({
      where: { tenantId: arielTenant.id },
    })

    const remainingServers = await prisma.server.count({
      where: { tenantId: arielTenant.id },
    })

    console.log('\nüìä Datos restantes en Ariel:')
    console.log(`   ‚Ä¢ Clientes: ${remainingCustomers}`)
    console.log(`   ‚Ä¢ Clientes de servidor: ${remainingServerClients}`)
    console.log(`   ‚Ä¢ Servidores: ${remainingServers}`)

    // Verificar usuarios (no los eliminamos)
    const usersCount = await prisma.user.count({
      where: { tenantId: arielTenant.id },
    })

    console.log(`   ‚Ä¢ Usuarios: ${usersCount} (conservados)`)

    // Verificar m√≥dulos habilitados (no los tocamos)
    const enabledModules = await prisma.tenantModule.findMany({
      where: {
        tenantId: arielTenant.id,
        isEnabled: true,
      },
      include: {
        module: true,
      },
    })

    console.log('\n‚úÖ M√≥dulos habilitados (conservados):')
    enabledModules.forEach(tm => {
      console.log(`   ‚Ä¢ ${tm.module.displayName} - ${tm.module.category}`)
    })

    // Resumen final
    console.log('\nüéâ ¬°Datos de ejemplo eliminados exitosamente!')
    console.log('üìã Resumen:')
    console.log(`   ‚Ä¢ Tenant: ${arielTenant.name} (${arielTenant.slug})`)
    console.log(`   ‚Ä¢ Usuarios: ${usersCount} (conservados)`)
    console.log(
      `   ‚Ä¢ M√≥dulos: ${enabledModules.length} habilitados (conservados)`
    )
    console.log(`   ‚Ä¢ Datos de ejemplo: ‚úÖ Eliminados`)

    console.log('\nüîó URLs de acceso:')
    console.log(`   ‚Ä¢ Login: http://localhost:3000/login`)
    console.log(`   ‚Ä¢ Dashboard: http://localhost:3000/dashboard`)

    console.log('\nüìù Pr√≥ximos pasos:')
    console.log('   1. Ir a http://localhost:3000/login')
    console.log('   2. Usar las credenciales: admin@ariel.com / ariel123')
    console.log('   3. Verificar que los m√≥dulos est√©n vac√≠os')
    console.log('   4. Crear nuevos datos desde cero si es necesario')
  } catch (error) {
    console.error('‚ùå Error eliminando datos de ejemplo:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Ejecutar el script
deleteArielExampleData()
  .then(() => {
    console.log('\n‚úÖ Script completado exitosamente')
    process.exit(0)
  })
  .catch(error => {
    console.error('\n‚ùå Error en el script:', error)
    process.exit(1)
  })
