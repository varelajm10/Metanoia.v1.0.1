import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function deleteMetanoiaDemoTenant() {
  try {
    console.log('üöÄ Eliminando tenant "Metanoia Demo"...')

    // Buscar el tenant Metanoia Demo
    const metanoiaDemo = await prisma.tenant.findUnique({
      where: { slug: 'metanoia-demo' },
      include: {
        users: true,
        tenantModules: true,
        customers: true,
        servers: true,
        products: true,
        orders: true,
        invoices: true,
      },
    })

    if (!metanoiaDemo) {
      console.log('‚ùå Tenant "Metanoia Demo" no encontrado')
      return
    }

    console.log(`‚úÖ Tenant "Metanoia Demo" encontrado: ${metanoiaDemo.name}`)
    console.log(`üìä Datos asociados:`)
    console.log(`   ‚Ä¢ Usuarios: ${metanoiaDemo.users.length}`)
    console.log(
      `   ‚Ä¢ M√≥dulos habilitados: ${metanoiaDemo.tenantModules.length}`
    )
    console.log(`   ‚Ä¢ Clientes: ${metanoiaDemo.customers.length}`)
    console.log(`   ‚Ä¢ Servidores: ${metanoiaDemo.servers.length}`)
    console.log(`   ‚Ä¢ Productos: ${metanoiaDemo.products.length}`)
    console.log(`   ‚Ä¢ √ìrdenes: ${metanoiaDemo.orders.length}`)
    console.log(`   ‚Ä¢ Facturas: ${metanoiaDemo.invoices.length}`)

    // Confirmar eliminaci√≥n
    console.log(
      '\n‚ö†Ô∏è  ATENCI√ìN: Se eliminar√°n TODOS los datos del tenant "Metanoia Demo"'
    )
    console.log(
      '   Esto incluye usuarios, m√≥dulos, clientes, servidores, productos, √≥rdenes y facturas.'
    )
    console.log('   El tenant "Ariel S.A." NO ser√° afectado.')

    // Eliminar el tenant (esto eliminar√° autom√°ticamente todos los datos relacionados por CASCADE)
    await prisma.tenant.delete({
      where: { id: metanoiaDemo.id },
    })

    console.log('\n‚úÖ Tenant "Metanoia Demo" eliminado exitosamente!')
    console.log('üìã Resumen:')
    console.log(`   ‚Ä¢ Tenant eliminado: ${metanoiaDemo.name}`)
    console.log(`   ‚Ä¢ Usuarios eliminados: ${metanoiaDemo.users.length}`)
    console.log(`   ‚Ä¢ M√≥dulos eliminados: ${metanoiaDemo.tenantModules.length}`)
    console.log(`   ‚Ä¢ Clientes eliminados: ${metanoiaDemo.customers.length}`)
    console.log(`   ‚Ä¢ Servidores eliminados: ${metanoiaDemo.servers.length}`)
    console.log(`   ‚Ä¢ Productos eliminados: ${metanoiaDemo.products.length}`)
    console.log(`   ‚Ä¢ √ìrdenes eliminadas: ${metanoiaDemo.orders.length}`)
    console.log(`   ‚Ä¢ Facturas eliminadas: ${metanoiaDemo.invoices.length}`)

    // Verificar que Ariel S.A. sigue existiendo
    const arielTenant = await prisma.tenant.findUnique({
      where: { slug: 'ariel-sa' },
      include: {
        users: true,
        tenantModules: true,
        customers: true,
        servers: true,
      },
    })

    if (arielTenant) {
      console.log('\n‚úÖ Tenant "Ariel S.A." verificado y sigue activo:')
      console.log(`   ‚Ä¢ Nombre: ${arielTenant.name}`)
      console.log(`   ‚Ä¢ Usuarios: ${arielTenant.users.length}`)
      console.log(
        `   ‚Ä¢ M√≥dulos habilitados: ${arielTenant.tenantModules.length}`
      )
      console.log(`   ‚Ä¢ Clientes: ${arielTenant.customers.length}`)
      console.log(`   ‚Ä¢ Servidores: ${arielTenant.servers.length}`)
    } else {
      console.log('\n‚ùå ERROR: Tenant "Ariel S.A." no encontrado!')
    }

    // Listar todos los tenants restantes
    const remainingTenants = await prisma.tenant.findMany({
      select: {
        id: true,
        name: true,
        slug: true,
        isActive: true,
        createdAt: true,
      },
    })

    console.log('\nüìã Tenants restantes en el sistema:')
    remainingTenants.forEach((tenant, index) => {
      console.log(
        `   ${index + 1}. ${tenant.name} (${tenant.slug}) - ${tenant.isActive ? 'Activo' : 'Inactivo'}`
      )
    })
  } catch (error) {
    console.error('‚ùå Error eliminando tenant Metanoia Demo:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Ejecutar el script
deleteMetanoiaDemoTenant()
  .then(() => {
    console.log('\n‚úÖ Script completado exitosamente')
    process.exit(0)
  })
  .catch(error => {
    console.error('\n‚ùå Error en el script:', error)
    process.exit(1)
  })
