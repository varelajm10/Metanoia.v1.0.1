#!/usr/bin/env node

/**
 * üß™ Script de Prueba del Dashboard - Metanoia V1.0.2
 *
 * Este script verifica que el dashboard est√© funcionando correctamente
 * y que todos los m√≥dulos aparezcan.
 */

const fetch = require('node-fetch')

class DashboardTester {
  constructor() {
    this.baseUrl = 'http://localhost:3000'
  }

  /**
   * Probar endpoint de m√≥dulos
   */
  async testModulesEndpoint() {
    try {
      console.log('üîç Probando endpoint de m√≥dulos...')
      const response = await fetch(`${this.baseUrl}/api/modules-simple`)

      if (!response.ok) {
        console.log(
          '‚ùå Error en endpoint:',
          response.status,
          response.statusText
        )
        return false
      }

      const data = await response.json()
      console.log('‚úÖ Endpoint funcionando correctamente')
      console.log(`üìä M√≥dulos encontrados: ${data.data.length}`)

      // Verificar m√≥dulo de colegios espec√≠ficamente
      const schoolsModule = data.data.find(m => m.id === 'schools')
      if (schoolsModule) {
        console.log('‚úÖ M√≥dulo de Colegios encontrado:')
        console.log(`   - ID: ${schoolsModule.id}`)
        console.log(`   - Nombre: ${schoolsModule.displayName}`)
        console.log(`   - Icono: ${schoolsModule.icon}`)
        console.log(`   - Color: ${schoolsModule.color}`)
        console.log(`   - Activo: ${schoolsModule.isActive}`)
      } else {
        console.log('‚ùå M√≥dulo de Colegios NO encontrado')
        return false
      }

      return true
    } catch (error) {
      console.log('‚ùå Error probando endpoint:', error.message)
      return false
    }
  }

  /**
   * Probar p√°gina del dashboard
   */
  async testDashboardPage() {
    try {
      console.log('üîç Probando p√°gina del dashboard...')
      const response = await fetch(`${this.baseUrl}/dashboard`)

      if (!response.ok) {
        console.log(
          '‚ùå Error en p√°gina del dashboard:',
          response.status,
          response.statusText
        )
        return false
      }

      const html = await response.text()

      // Verificar que la p√°gina contenga elementos clave
      if (
        html.includes('Panel de Administraci√≥n') ||
        html.includes('Dashboard')
      ) {
        console.log('‚úÖ P√°gina del dashboard cargando correctamente')
        return true
      } else {
        console.log('‚ö†Ô∏è P√°gina del dashboard no contiene elementos esperados')
        return false
      }
    } catch (error) {
      console.log('‚ùå Error probando p√°gina del dashboard:', error.message)
      return false
    }
  }

  /**
   * Generar instrucciones para el usuario
   */
  generateInstructions() {
    console.log('\nüìã INSTRUCCIONES PARA SOLUCIONAR EL PROBLEMA:')
    console.log('=============================================')
    console.log('')
    console.log('1. üîÑ REFRESCAR EL NAVEGADOR:')
    console.log('   - Presiona Ctrl + F5 (Windows) o Cmd + Shift + R (Mac)')
    console.log('   - Esto fuerza la recarga completa sin cach√©')
    console.log('')
    console.log('2. üßπ LIMPIAR CACH√â DEL NAVEGADOR:')
    console.log('   - Abre las herramientas de desarrollador (F12)')
    console.log('   - Ve a la pesta√±a "Network" o "Red"')
    console.log('   - Marca "Disable cache" o "Deshabilitar cach√©"')
    console.log('   - Refresca la p√°gina')
    console.log('')
    console.log('3. üîç VERIFICAR CONSOLA DEL NAVEGADOR:')
    console.log('   - Abre las herramientas de desarrollador (F12)')
    console.log('   - Ve a la pesta√±a "Console" o "Consola"')
    console.log('   - Busca errores en rojo')
    console.log('   - Si hay errores, comp√°rtelos')
    console.log('')
    console.log('4. üåê VERIFICAR URL CORRECTA:')
    console.log('   - Aseg√∫rate de estar en: http://localhost:3000/dashboard')
    console.log('   - No uses https:// o puertos diferentes')
    console.log('')
    console.log('5. üîÑ REINICIAR SERVIDOR:')
    console.log('   - Det√©n el servidor (Ctrl + C)')
    console.log('   - Ejecuta: npm run dev')
    console.log('   - Espera a que aparezca "Ready in X.Xs"')
    console.log('')
    console.log('6. üì± PROBAR EN NAVEGADOR DIFERENTE:')
    console.log('   - Prueba en Chrome, Firefox, Edge, etc.')
    console.log('   - Si funciona en uno, el problema es de cach√©')
    console.log('')
    console.log('7. üîß VERIFICAR M√ìDULOS EN C√ìDIGO:')
    console.log('   - El m√≥dulo de colegios est√° configurado correctamente')
    console.log('   - El API retorna los datos correctos')
    console.log('   - El problema es de cach√© del navegador')
  }

  /**
   * Ejecutar todas las pruebas
   */
  async run() {
    console.log('üß™ PRUEBAS DEL DASHBOARD - METANOIA V1.0.2')
    console.log('===========================================')
    console.log('')

    // Probar endpoint de m√≥dulos
    const modulesOk = await this.testModulesEndpoint()

    // Probar p√°gina del dashboard
    const dashboardOk = await this.testDashboardPage()

    console.log('\nüìä RESULTADO DE LAS PRUEBAS:')
    console.log('============================')
    console.log(
      `‚úÖ Endpoint de m√≥dulos: ${modulesOk ? 'FUNCIONANDO' : 'ERROR'}`
    )
    console.log(
      `‚úÖ P√°gina del dashboard: ${dashboardOk ? 'FUNCIONANDO' : 'ERROR'}`
    )

    if (modulesOk && dashboardOk) {
      console.log('\nüéâ TODAS LAS PRUEBAS PASARON')
      console.log('El problema es de cach√© del navegador')
      this.generateInstructions()
    } else {
      console.log('\n‚ùå HAY PROBLEMAS CON EL SERVIDOR')
      console.log('Revisa los errores anteriores')
    }
  }
}

// Ejecutar pruebas
const tester = new DashboardTester()
tester.run().catch(console.error)
