#!/usr/bin/env node

/**
 * üîß Script de Configuraci√≥n para Commit Autom√°tico - Metanoia V1.0.2
 *
 * Este script configura el commit autom√°tico en el sistema
 * y proporciona opciones de configuraci√≥n.
 */

const fs = require('fs')
const path = require('path')
const { execSync } = require('child_process')

class AutoCommitSetup {
  constructor() {
    this.config = {
      interval: 30, // minutos
      enabled: true,
      pushToGitHub: true,
      logLevel: 'INFO',
      maxLogSize: 1024 * 1024, // 1MB
    }
  }

  /**
   * Verificar si Git est√° configurado
   */
  checkGitConfig() {
    try {
      execSync('git --version', { stdio: 'pipe' })
      console.log('‚úÖ Git est√° instalado')
      return true
    } catch (error) {
      console.error('‚ùå Git no est√° instalado o no est√° en el PATH')
      return false
    }
  }

  /**
   * Verificar si hay un repositorio Git
   */
  checkGitRepository() {
    try {
      execSync('git rev-parse --git-dir', { stdio: 'pipe' })
      console.log('‚úÖ Repositorio Git encontrado')
      return true
    } catch (error) {
      console.error('‚ùå No se encontr√≥ un repositorio Git en este directorio')
      return false
    }
  }

  /**
   * Verificar configuraci√≥n de Git
   */
  checkGitUserConfig() {
    try {
      const name = execSync('git config user.name', { encoding: 'utf8' }).trim()
      const email = execSync('git config user.email', {
        encoding: 'utf8',
      }).trim()

      if (name && email) {
        console.log(`‚úÖ Git configurado: ${name} <${email}>`)
        return true
      } else {
        console.error('‚ùå Git no est√° configurado con nombre y email')
        return false
      }
    } catch (error) {
      console.error('‚ùå Error verificando configuraci√≥n de Git')
      return false
    }
  }

  /**
   * Verificar conexi√≥n con GitHub
   */
  checkGitHubConnection() {
    try {
      const remotes = execSync('git remote -v', { encoding: 'utf8' })
      if (remotes.includes('github.com')) {
        console.log('‚úÖ Conexi√≥n con GitHub configurada')
        return true
      } else {
        console.log('‚ö†Ô∏è No se encontr√≥ conexi√≥n con GitHub')
        return false
      }
    } catch (error) {
      console.error('‚ùå Error verificando conexi√≥n con GitHub')
      return false
    }
  }

  /**
   * Crear archivo de configuraci√≥n
   */
  createConfigFile() {
    const configPath = 'scripts/auto-commit-config.json'
    const config = {
      ...this.config,
      createdAt: new Date().toISOString(),
      version: '1.0.0',
      description: 'Configuraci√≥n para commit autom√°tico de Metanoia V1.0.2',
    }

    try {
      fs.writeFileSync(configPath, JSON.stringify(config, null, 2))
      console.log(`‚úÖ Archivo de configuraci√≥n creado: ${configPath}`)
      return true
    } catch (error) {
      console.error(
        `‚ùå Error creando archivo de configuraci√≥n: ${error.message}`
      )
      return false
    }
  }

  /**
   * Crear script de inicio
   */
  createStartScript() {
    const startScript = `#!/bin/bash
# ü§ñ Script de Inicio para Commit Autom√°tico
# Generado autom√°ticamente por setup-auto-commit.js

echo "üöÄ Iniciando commit autom√°tico para Metanoia V1.0.1..."
echo "üìÅ Directorio: $(pwd)"
echo "‚è∞ Intervalo: ${this.config.interval} minutos"
echo ""

# Verificar si Node.js est√° disponible
if command -v node >/dev/null 2>&1; then
    echo "‚úÖ Node.js encontrado, usando script JavaScript..."
    node scripts/auto-commit.js
else
    echo "‚ö†Ô∏è Node.js no encontrado, usando script Bash..."
    bash scripts/auto-commit.sh
fi
`

    try {
      fs.writeFileSync('scripts/start-auto-commit.sh', startScript)
      fs.chmodSync('scripts/start-auto-commit.sh', '755')
      console.log('‚úÖ Script de inicio creado: scripts/start-auto-commit.sh')
      return true
    } catch (error) {
      console.error(`‚ùå Error creando script de inicio: ${error.message}`)
      return false
    }
  }

  /**
   * Crear script de Windows
   */
  createWindowsScript() {
    const windowsScript = `@echo off
REM ü§ñ Script de Inicio para Commit Autom√°tico en Windows
REM Generado autom√°ticamente por setup-auto-commit.js

echo üöÄ Iniciando commit autom√°tico para Metanoia V1.0.1...
echo üìÅ Directorio: %CD%
echo ‚è∞ Intervalo: ${this.config.interval} minutos
echo.

REM Verificar si Node.js est√° disponible
where node >nul 2>&1
if %errorlevel% equ 0 (
    echo ‚úÖ Node.js encontrado, usando script JavaScript...
    node scripts/auto-commit.js
) else (
    echo ‚ö†Ô∏è Node.js no encontrado, usando script Batch...
    call scripts/auto-commit.bat
)
`

    try {
      fs.writeFileSync('scripts/start-auto-commit.bat', windowsScript)
      console.log('‚úÖ Script de Windows creado: scripts/start-auto-commit.bat')
      return true
    } catch (error) {
      console.error(`‚ùå Error creando script de Windows: ${error.message}`)
      return false
    }
  }

  /**
   * Crear documentaci√≥n
   */
  createDocumentation() {
    const docs = `# ü§ñ Commit Autom√°tico - Metanoia V1.0.1

## üìã Descripci√≥n

Este sistema de commit autom√°tico mantiene tu c√≥digo respaldado constantemente haciendo commits cada 30 minutos.

## üöÄ Uso

### Iniciar Commit Autom√°tico

#### En Windows:
\`\`\`bash
scripts/start-auto-commit.bat
\`\`\`

#### En Linux/Mac:
\`\`\`bash
bash scripts/start-auto-commit.sh
\`\`\`

#### Con Node.js (recomendado):
\`\`\`bash
node scripts/auto-commit.js
\`\`\`

### Detener Commit Autom√°tico

Presiona \`Ctrl+C\` para detener el proceso.

## ‚öôÔ∏è Configuraci√≥n

El archivo \`scripts/auto-commit-config.json\` contiene la configuraci√≥n:

- \`interval\`: Intervalo en minutos (default: 30)
- \`enabled\`: Habilitar/deshabilitar (default: true)
- \`pushToGitHub\`: Hacer push autom√°tico (default: true)
- \`logLevel\`: Nivel de logging (default: INFO)

## üìä Caracter√≠sticas

- ‚úÖ **Commit autom√°tico** cada 30 minutos
- ‚úÖ **Solo commitea si hay cambios**
- ‚úÖ **Mensajes descriptivos** con timestamp
- ‚úÖ **Push autom√°tico** a GitHub
- ‚úÖ **Logs detallados** de actividad
- ‚úÖ **Manejo de errores** robusto
- ‚úÖ **Estad√≠sticas** de commits

## üìù Logs

Los logs se guardan en \`scripts/auto-commit.log\` con informaci√≥n detallada:

- Timestamp de cada operaci√≥n
- N√∫mero de archivos modificados
- Estado de push a GitHub
- Errores y advertencias

## üîß Soluci√≥n de Problemas

### Error: "Git no configurado"
\`\`\`bash
git config --global user.name "Tu Nombre"
git config --global user.email "tu-email@ejemplo.com"
\`\`\`

### Error: "No hay repositorio Git"
\`\`\`bash
git init
git remote add origin https://github.com/tu-usuario/Metanoia.v1.0.1.git
\`\`\`

### Error: "Push fall√≥"
- Verifica tu conexi√≥n a internet
- Aseg√∫rate de tener permisos de escritura en el repositorio
- El commit se guarda localmente y se sincronizar√° en el pr√≥ximo push exitoso

## üìû Soporte

Si encuentras problemas:

1. Revisa los logs en \`scripts/auto-commit.log\`
2. Verifica la configuraci√≥n de Git
3. Aseg√∫rate de tener conexi√≥n a internet
4. Contacta al desarrollador si persisten los problemas

---

**¬© 2024 Metanoia.click - Sistema ERP Modular SaaS**
`

    try {
      fs.writeFileSync('scripts/README-auto-commit.md', docs)
      console.log('‚úÖ Documentaci√≥n creada: scripts/README-auto-commit.md')
      return true
    } catch (error) {
      console.error(`‚ùå Error creando documentaci√≥n: ${error.message}`)
      return false
    }
  }

  /**
   * Ejecutar configuraci√≥n completa
   */
  async setup() {
    console.log('üîß CONFIGURANDO COMMIT AUTOM√ÅTICO - METANOIA V1.0.2')
    console.log('================================================')
    console.log('')

    // Verificaciones
    console.log('üîç Verificando requisitos...')

    if (!this.checkGitConfig()) {
      console.error(
        '‚ùå Git no est√° instalado. Instala Git y vuelve a intentar.'
      )
      return false
    }

    if (!this.checkGitRepository()) {
      console.error('‚ùå No hay repositorio Git. Ejecuta "git init" primero.')
      return false
    }

    if (!this.checkGitUserConfig()) {
      console.error('‚ùå Git no est√° configurado. Configura tu nombre y email:')
      console.error('   git config --global user.name "Tu Nombre"')
      console.error('   git config --global user.email "tu-email@ejemplo.com"')
      return false
    }

    this.checkGitHubConnection()

    console.log('')
    console.log('üìÅ Creando archivos de configuraci√≥n...')

    // Crear archivos
    this.createConfigFile()
    this.createStartScript()
    this.createWindowsScript()
    this.createDocumentation()

    console.log('')
    console.log('‚úÖ CONFIGURACI√ìN COMPLETADA')
    console.log('==========================')
    console.log('')
    console.log('üöÄ Para iniciar el commit autom√°tico:')
    console.log('')
    console.log('   Windows:')
    console.log('   scripts/start-auto-commit.bat')
    console.log('')
    console.log('   Linux/Mac:')
    console.log('   bash scripts/start-auto-commit.sh')
    console.log('')
    console.log('   Con Node.js:')
    console.log('   node scripts/auto-commit.js')
    console.log('')
    console.log('üìö Documentaci√≥n: scripts/README-auto-commit.md')
    console.log('‚öôÔ∏è Configuraci√≥n: scripts/auto-commit-config.json')
    console.log('')

    return true
  }
}

// Ejecutar configuraci√≥n
const setup = new AutoCommitSetup()
setup.setup().catch(console.error)
