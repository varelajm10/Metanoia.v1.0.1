version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: metanoia-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: metanoia
      POSTGRES_USER: metanoia_user
      POSTGRES_PASSWORD: metanoia_password
      POSTGRES_MULTIPLE_DATABASES: metanoia_tenant1,metanoia_tenant2
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    ports:
      - '5432:5432'
    networks:
      - metanoia-network

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: metanoia-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'
    networks:
      - metanoia-network

  # Aplicación Next.js
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: metanoia-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://metanoia_user:metanoia_password@postgres:5432/metanoia
      - REDIS_URL=redis://:redis_password@redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=your-nextauth-secret-change-in-production
    ports:
      - '3000:3000'
    depends_on:
      - postgres
      - redis
    networks:
      - metanoia-network
    volumes:
      - ./uploads:/app/uploads

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: metanoia-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - metanoia-network

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: metanoia-prometheus
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - metanoia-network

  # Alertmanager para alertas
  alertmanager:
    image: prom/alertmanager:latest
    container_name: metanoia-alertmanager
    restart: unless-stopped
    ports:
      - '9093:9093'
    volumes:
      - ./docker/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - metanoia-network

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: metanoia-postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://metanoia_user:metanoia_password@postgres:5432/metanoia?sslmode=disable"
    ports:
      - '9187:9187'
    depends_on:
      - postgres
    networks:
      - metanoia-network

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: metanoia-redis-exporter
    restart: unless-stopped
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: "redis_password"
    ports:
      - '9121:9121'
    depends_on:
      - redis
    networks:
      - metanoia-network

  # Node Exporter para métricas del sistema
  node-exporter:
    image: prom/node-exporter:latest
    container_name: metanoia-node-exporter
    restart: unless-stopped
    ports:
      - '9100:9100'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - metanoia-network

  # cAdvisor para métricas de contenedores Docker
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: metanoia-cadvisor
    restart: unless-stopped
    ports:
      - '8080:8080'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - metanoia-network

  # Grafana para visualización
  grafana:
    image: grafana/grafana:latest
    container_name: metanoia-grafana
    restart: unless-stopped
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=metanoia_grafana_2025
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
      - alertmanager
    networks:
      - metanoia-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:

networks:
  metanoia-network:
    driver: bridge
