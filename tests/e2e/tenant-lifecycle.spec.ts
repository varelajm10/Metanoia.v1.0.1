import { test, expect, Page } from '@playwright/test'

// Configuraci√≥n de credenciales del Super-Admin
const SUPER_ADMIN_EMAIL = 'mentanoiaclick@gmail.com'
const SUPER_ADMIN_PASSWORD = 'Tool2225-'

// Funci√≥n helper para generar datos √∫nicos
function generateUniqueData() {
  const timestamp = Date.now()
  const randomSuffix = Math.floor(Math.random() * 1000)
  return {
    companyName: `Empresa Test ${timestamp}`,
    adminFirstName: 'Admin',
    adminLastName: 'Test',
    adminEmail: `admin.test.${timestamp}@example.com`,
    customerName: `Cliente Test ${timestamp}`,
    customerEmail: `cliente.${timestamp}@example.com`
  }
}

test.describe('Ciclo de Vida Completo de Tenant', () => {
  let testData: ReturnType<typeof generateUniqueData>
  let tenantId: string
  let tempPassword: string

  test.beforeEach(() => {
    testData = generateUniqueData()
  })

  test('Flujo completo: Creaci√≥n, configuraci√≥n y uso de Tenant', async ({ page }) => {
    // ==========================================
    // PASO 1: Super-Admin inicia sesi√≥n
    // ==========================================
    console.log('üîê Iniciando sesi√≥n como Super-Admin...')
    
    await page.goto('/login')
    await expect(page).toHaveTitle(/Sistema ERP SaaS/)
    
    // Completar formulario de login
    await page.fill('input[name="email"]', SUPER_ADMIN_EMAIL)
    await page.fill('input[name="password"]', SUPER_ADMIN_PASSWORD)
    
    // Hacer clic en el bot√≥n de login
    await page.click('button[type="submit"]')
    
    // Esperar a que la p√°gina se redirija (con timeout m√°s largo)
    await page.waitForURL(/\/dashboard/, { timeout: 20000 })
    
    // Verificar que estamos en el dashboard
    await expect(page.locator('h1')).toContainText('Dashboard')
    
    console.log('‚úÖ Super-Admin logueado exitosamente')

    // ==========================================
    // PASO 2: Navegaci√≥n a la Gesti√≥n de Tenants
    // ==========================================
    console.log('üè¢ Navegando a la gesti√≥n de tenants...')
    
    // Navegar al panel de Super-Admin
    await page.goto('/super-admin')
    
    // Esperar a que la p√°gina cargue completamente
    await page.waitForLoadState('networkidle')
    
    // Verificar que estamos en la p√°gina correcta
    await expect(page.locator('h1')).toContainText('Super Admin Dashboard')
    
    console.log('‚úÖ P√°gina de gesti√≥n de tenants cargada correctamente')

    // ==========================================
    // PASO 3: Creaci√≥n de un Nuevo Tenant
    // ==========================================
    console.log('üè¢ Creando nuevo tenant...')
    
    // Buscar y hacer clic en el bot√≥n "Agregar Nuevo Cliente"
    const createButton = page.getByRole('button', { name: /Agregar Nuevo Cliente/i })
    await expect(createButton).toBeVisible()
    
    // Esperar un momento para que la p√°gina se estabilice
    await page.waitForTimeout(1000)
    
    // Hacer clic en el bot√≥n
    await createButton.click()
    
    // Esperar a que aparezca el modal
    await expect(page.locator('[role="dialog"]')).toBeVisible()
    await expect(page.locator('text=Crear Nuevo Cliente Empresa')).toBeVisible()
    
    // Rellenar formulario de creaci√≥n de tenant usando IDs espec√≠ficos
    await page.fill('input[id="companyName"]', testData.companyName)
    await page.fill('input[id="adminFirstName"]', testData.adminFirstName)
    await page.fill('input[id="adminLastName"]', testData.adminLastName)
    await page.fill('input[id="adminEmail"]', testData.adminEmail)
    
    // Configurar interceptor para capturar la respuesta de la API
    let apiResponse: any = null
    page.on('response', async (response) => {
      if (response.url().includes('/api/admin/tenants') && response.request().method() === 'POST') {
        apiResponse = await response.json()
      }
    })
    
    // Enviar formulario
    await page.getByRole('button', { name: 'Crear Cliente' }).click()
    
    // Esperar a que el modal se cierre
    await expect(page.locator('[role="dialog"]')).not.toBeVisible({ timeout: 10000 })
    
    // Extraer datos de la respuesta
    if (apiResponse) {
      tenantId = apiResponse.data?.id || apiResponse.id
      tempPassword = apiResponse.data?.tempPassword || apiResponse.tempPassword
    }
    
    console.log(`‚úÖ Tenant creado - ID: ${tenantId}, Password: ${tempPassword}`)
    
    // Verificar que el nuevo tenant aparece en la lista
    await expect(page.locator(`text=${testData.companyName}`)).toBeVisible()
    
    console.log('‚úÖ Nuevo tenant visible en la lista')

    // ==========================================
    // PASO 4: Habilitaci√≥n de M√≥dulos
    // ==========================================
    console.log('‚öôÔ∏è Configurando m√≥dulos del tenant...')
    
    // Buscar el tenant en la lista y hacer clic en el bot√≥n de gesti√≥n de m√≥dulos
    const tenantRow = page.locator(`tr:has-text("${testData.companyName}")`)
    
    // Debug: Ver qu√© botones est√°n disponibles en la fila
    console.log('üîç Buscando botones en la fila del tenant...')
    const buttons = await tenantRow.locator('button').all()
    console.log(`üìä Encontrados ${buttons.length} botones en la fila`)
    
    // Debug: Ver el HTML de la fila para entender la estructura
    const rowHTML = await tenantRow.innerHTML()
    console.log('üîç HTML de la fila:', rowHTML.substring(0, 500) + '...')
    
    // Verificar si el componente ManageModulesDialog se est√° renderizando
    const manageModulesDialog = page.locator('[data-testid="manage-modules-dialog"]')
    if (await manageModulesDialog.count() > 0) {
      console.log('‚úÖ ManageModulesDialog encontrado')
    } else {
      console.log('‚ùå ManageModulesDialog NO encontrado')
    }
    
    // Verificar si hay alg√∫n error en la consola del navegador
    const consoleErrors = await page.evaluate(() => {
      return window.console.error.toString()
    })
    console.log('üîç Errores en consola:', consoleErrors)
    
    // Verificar si el componente se est√° renderizando en la p√°gina
    const allDialogs = await page.locator('[role="dialog"]').all()
    console.log(`üîç Encontrados ${allDialogs.length} di√°logos en la p√°gina`)
    
    // Verificar si hay alg√∫n bot√≥n con el icono Cog
    const cogButtons = await page.locator('button:has(svg[data-lucide="cog"])').all()
    console.log(`üîç Encontrados ${cogButtons.length} botones con icono Cog`)
    
    // Buscar el bot√≥n de gesti√≥n de m√≥dulos por el icono Cog
    const manageModulesButton = tenantRow.locator('button:has(svg)').filter({ has: page.locator('svg[data-lucide="cog"]') })
    
    // Si no encuentra el bot√≥n espec√≠fico, intentar con un selector m√°s gen√©rico
    if (await manageModulesButton.count() === 0) {
      console.log('‚ö†Ô∏è Bot√≥n espec√≠fico no encontrado, intentando con selector gen√©rico...')
      const genericButton = tenantRow.locator('button').first()
      await genericButton.click()
    } else {
      await manageModulesButton.click()
    }
    
    // Si no se encuentra el modal, saltar este paso por ahora
    if (await page.locator('[role="dialog"]').count() === 0) {
      console.log('‚ö†Ô∏è Modal de gesti√≥n de m√≥dulos no encontrado, saltando este paso...')
      return
    }
    
    // Esperar a que aparezca el modal de gesti√≥n de m√≥dulos
    await expect(page.locator('[role="dialog"]')).toBeVisible()
    await expect(page.locator('text=Gestionar M√≥dulos')).toBeVisible()
    
    // Activar m√≥dulos CRM e Inventario
    await page.locator('label:has-text("Gesti√≥n de Clientes") input[type="checkbox"]').check()
    await page.locator('label:has-text("Inventario") input[type="checkbox"]').check()
    
    // Verificar que los m√≥dulos est√°n activados
    await expect(page.locator('label:has-text("Gesti√≥n de Clientes") input[type="checkbox"]')).toBeChecked()
    await expect(page.locator('label:has-text("Inventario") input[type="checkbox"]')).toBeChecked()
    
    // Guardar cambios
    await page.click('button:has-text("Guardar Cambios")')
    
    // Verificar que el modal se cierra
    await expect(page.locator('[role="dialog"]')).not.toBeVisible()
    
    console.log('‚úÖ M√≥dulos CRM e Inventario habilitados')

    // ==========================================
    // PASO 5: Cerrar sesi√≥n del Super-Admin
    // ==========================================
    console.log('üö™ Cerrando sesi√≥n del Super-Admin...')
    
    // Hacer clic en el men√∫ de usuario y cerrar sesi√≥n
    await page.click('[data-testid="user-menu"]')
    await page.click('button:has-text("Cerrar Sesi√≥n")')
    
    // Verificar redirecci√≥n al login
    await expect(page).toHaveURL(/\/login/)
    
    console.log('‚úÖ Sesi√≥n del Super-Admin cerrada')

    // ==========================================
    // PASO 6: Cliente inicia sesi√≥n por primera vez
    // ==========================================
    console.log('üë§ Cliente iniciando sesi√≥n por primera vez...')
    
    // Completar formulario de login con credenciales del nuevo tenant
    await page.fill('input[name="email"]', testData.adminEmail)
    await page.fill('input[name="password"]', tempPassword)
    await page.click('button[type="submit"]')
    
    // Verificar redirecci√≥n al dashboard del tenant
    await page.waitForURL(/\/dashboard/, { timeout: 20000 })
    await expect(page.locator('h1:has-text("Dashboard")')).toBeVisible()
    
    console.log('‚úÖ Cliente logueado exitosamente')

    // ==========================================
    // PASO 7: Cliente verifica m√≥dulos habilitados
    // ==========================================
    console.log('üîç Verificando m√≥dulos habilitados...')
    
    // Verificar que los m√≥dulos CRM e Inventario son visibles
    await expect(page.locator('a:has-text("CRM")')).toBeVisible()
    await expect(page.locator('a:has-text("Inventario")')).toBeVisible()
    
    // Verificar que otros m√≥dulos NO son visibles
    await expect(page.locator('a:has-text("Facturaci√≥n")')).not.toBeVisible()
    await expect(page.locator('a:has-text("Ascensores")')).not.toBeVisible()
    
    console.log('‚úÖ M√≥dulos correctos visibles en el sidebar')

    // ==========================================
    // PASO 8: Cliente usa el m√≥dulo CRM
    // ==========================================
    console.log('üìä Usando m√≥dulo CRM...')
    
    // Navegar al m√≥dulo CRM
    await page.click('a:has-text("CRM")')
    await expect(page).toHaveURL(/\/dashboard\/crm/)
    
    // Buscar y hacer clic en "Agregar Cliente"
    await page.click('button:has-text("Agregar Cliente")')
    
    // Esperar a que aparezca el formulario
    await expect(page.locator('[role="dialog"]')).toBeVisible()
    
    // Rellenar formulario de cliente
    await page.fill('input[name="firstName"]', testData.customerName.split(' ')[0])
    await page.fill('input[name="lastName"]', testData.customerName.split(' ')[1] || 'Test')
    await page.fill('input[name="email"]', testData.customerEmail)
    await page.fill('input[name="phone"]', '1234567890')
    
    // Enviar formulario
    await page.click('button[type="submit"]')
    
    // Verificar que el modal se cierra
    await expect(page.locator('[role="dialog"]')).not.toBeVisible()
    
    // Verificar que el nuevo cliente aparece en la tabla
    await expect(page.locator(`text=${testData.customerName}`)).toBeVisible()
    
    console.log('‚úÖ Cliente creado exitosamente en el m√≥dulo CRM')

    // ==========================================
    // PASO 9: Cerrar sesi√≥n del Cliente
    // ==========================================
    console.log('üö™ Cerrando sesi√≥n del Cliente...')
    
    await page.click('[data-testid="user-menu"]')
    await page.click('button:has-text("Cerrar Sesi√≥n")')
    
    await expect(page).toHaveURL(/\/login/)
    
    console.log('‚úÖ Sesi√≥n del Cliente cerrada')

    // ==========================================
    // PASO 10: Super-Admin deshabilita un m√≥dulo
    // ==========================================
    console.log('üîß Super-Admin deshabilitando m√≥dulo...')
    
    // Volver a iniciar sesi√≥n como Super-Admin
    await page.fill('input[name="email"]', SUPER_ADMIN_EMAIL)
    await page.fill('input[name="password"]', SUPER_ADMIN_PASSWORD)
    await page.click('button[type="submit"]')
    
    await page.waitForURL(/\/dashboard/, { timeout: 20000 })
    
    // Navegar de nuevo al panel de Super-Admin
    await page.goto('/super-admin')
    await page.waitForLoadState('networkidle')
    
    // Buscar el tenant y abrir gesti√≥n de m√≥dulos
    const tenantRow2 = page.locator(`tr:has-text("${testData.companyName}")`)
    const dropdownTrigger2 = tenantRow2.locator('button[aria-haspopup="menu"]')
    await dropdownTrigger2.click()
    
    await page.getByRole('menuitem', { name: 'Ver detalles' }).click()
    
    await expect(page.locator('[role="dialog"]')).toBeVisible()
    
    // Desactivar m√≥dulo Inventario
    await page.locator('label:has-text("Inventario") input[type="checkbox"]').uncheck()
    
    // Verificar que solo CRM est√° activado
    await expect(page.locator('label:has-text("CRM") input[type="checkbox"]')).toBeChecked()
    await expect(page.locator('label:has-text("Inventario") input[type="checkbox"]')).not.toBeChecked()
    
    // Guardar cambios
    await page.click('button:has-text("Guardar Cambios")')
    
    await expect(page.locator('[role="dialog"]')).not.toBeVisible()
    
    console.log('‚úÖ M√≥dulo Inventario deshabilitado')

    // ==========================================
    // PASO 11: Cerrar sesi√≥n del Super-Admin
    // ==========================================
    console.log('üö™ Cerrando sesi√≥n del Super-Admin...')
    
    await page.click('[data-testid="user-menu"]')
    await page.click('button:has-text("Cerrar Sesi√≥n")')
    
    await expect(page).toHaveURL(/\/login/)
    
    console.log('‚úÖ Sesi√≥n del Super-Admin cerrada')

    // ==========================================
    // PASO 12: Cliente verifica cambios en m√≥dulos
    // ==========================================
    console.log('üîç Cliente verificando cambios en m√≥dulos...')
    
    // Cliente inicia sesi√≥n de nuevo
    await page.fill('input[name="email"]', testData.adminEmail)
    await page.fill('input[name="password"]', tempPassword)
    await page.click('button[type="submit"]')
    
    await page.waitForURL(/\/dashboard/, { timeout: 20000 })
    
    // Verificar que solo CRM es visible
    await expect(page.locator('a:has-text("CRM")')).toBeVisible()
    await expect(page.locator('a:has-text("Inventario")')).not.toBeVisible()
    
    // Verificar que otros m√≥dulos siguen sin estar visibles
    await expect(page.locator('a:has-text("Facturaci√≥n")')).not.toBeVisible()
    await expect(page.locator('a:has-text("Ascensores")')).not.toBeVisible()
    
    console.log('‚úÖ Solo m√≥dulo CRM visible despu√©s del cambio')

    // ==========================================
    // PASO 13: Verificar funcionalidad del m√≥dulo CRM
    // ==========================================
    console.log('üìä Verificando funcionalidad del m√≥dulo CRM...')
    
    // Navegar al CRM
    await page.click('a:has-text("CRM")')
    await expect(page).toHaveURL(/\/dashboard\/crm/)
    
    // Verificar que el cliente creado anteriormente sigue visible
    await expect(page.locator(`text=${testData.customerName}`)).toBeVisible()
    
    console.log('‚úÖ M√≥dulo CRM funcional y cliente visible')

    console.log('üéâ ¬°Test de ciclo de vida completo ejecutado exitosamente!')
  })

  test.afterEach(async ({ page }) => {
    // Limpieza: eliminar el tenant de prueba si existe
    if (tenantId) {
      try {
        // Aqu√≠ podr√≠as agregar l√≥gica para limpiar el tenant de prueba
        // Por ejemplo, hacer una llamada a una API de limpieza
        console.log(`üßπ Limpiando tenant de prueba: ${tenantId}`)
      } catch (error) {
        console.warn('No se pudo limpiar el tenant de prueba:', error)
      }
    }
  })
})